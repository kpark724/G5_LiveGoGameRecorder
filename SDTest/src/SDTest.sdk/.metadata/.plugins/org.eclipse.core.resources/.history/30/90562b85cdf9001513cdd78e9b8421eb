#include "xparameters.h"
#include "xil_types.h"
#include "xspi.h"
#include "platform.h"
#include "xil_printf.h"
#include "fat_filesystem.h"

#define BUF_SIZE 512
#define HURP_SIZE 1024

extern u8 spi_dev_status;
extern void sd_trivial_delay(u32 cycles);
extern volatile unsigned int * cd_ptr;
extern FILESYSTEM_T FS_filesystem;

s32 allocate_new_cluster(FILE * fd);

u8 buffer[BUF_SIZE];

/*
void init_microSD(CD_STATE state) {
	if(state == CD_SET) {
		SET_SD_POWER_STATE(ctrl_ptr);
		xil_printf("MicroSD power state set high\n");
	}
	else {
		UNSET_SD_POWER_STATE(ctrl_ptr);
		xil_printf("MicroSD power state set low\n");
	}
}

void update_cd_indicator(unsigned int state) {
	if(state != CD_SET) {
		UNSET_IND(ctrl_ptr);
	}
	else {
		SET_IND(ctrl_ptr);
	}

	init_microSD(state);

	return;
}
*/

void print_str_buf(u8 * buf, u32 length) {
	int i;

	if(length < 0) {
		xil_printf("Cannot print with negative length\n\r");
		return;
	}

	for(i = 0; i < length; ++i) {
		if((buf[i] >= (u8)' ' && buf[i] <= (u8)'~')) {
			xil_printf("%c", (char)buf[i]);
		}
		else if(buf[i] == (u8)10) {
			xil_printf("\n\r");
		}
		else {
			//xil_printf("Extra Char: %02X\n", buf[i]);
			continue;
		}
	}

	return;
}

void print_fd(FILE * fd) {
	int i;

	print_str_buf(fd->filename, 8);
	xil_printf("current_sector = %d\ncurrent_cluster = %d\ncurrent_offset = %d\n\r", fd->current_sector,
																					fd->clusters[fd->current_cluster],
																					fd->current_offset);
	xil_printf("loaded_sec = %d\n\r", CLUSTER_SEC(fd));

	//sd_debug_print_hex(fd->loaded_sector, SD_INIT_SEC_SIZE, 16);
	xil_printf("num_clusters = %d\n\r", fd->num_clusters);
	xil_printf("allocated clusters: ");
	for(i = 0; i < fd->num_clusters; ++i) {
		xil_printf("0x%02X ", fd->clusters[i]);
	}
	xil_printf("\n\r");
	xil_printf("file_size = %d\n\r", fd->file_size);
	return;
}

int main (){
	s32 i, j;
	s32 len, status;
	FILE * fp;
	u8 temp_buf[10];
	u8 read_buf[HURP_SIZE];

	init_platform();

	while(*cd_ptr != 0);

	sd_trivial_delay(1000000);

	spi_dev_status |= SD_FS_CARD_DETECT;

	switch(init_fat_filesystem()) {
	case 0:
		xil_printf("microSD initialized successfully\n\r");
		break;

	default:
		xil_printf("Exiting\n\r");
		return -1;
	}

	fp = fat_open((u8 *)"SDCONTEN.TXT");

	if(fp == NULL) {
		xil_printf("Couldn't open file\n\r");
		goto end;
	}

	//print_fd(fp);

	//fat_seek(fp, (u32)(-1));
	//xil_printf("write_len = %d\n\r", fat_write(fp, (u8 *)"Get to the choppa!\n\r", 20));

	for(i = 0; i < 25; ++i) {
		status = sd_read(i, 0, read_buf, SD_INIT_SEC_SIZE);

		if(status < 0)
			goto end;

		temp_buf[2] = ' ';

		for(j = 0; j < SD_INIT_SEC_SIZE; ++j) {
			temp_buf[0] = (u8)('0' + (read_buf[j] >> 4));
			temp_buf[1] = (u8)('0' + (read_buf[j] & 0xF));

			if(j % 16 == 0) {
				fat_write(fp, (u8 *)'\n', 1);
			}

			fat_write(fp, temp_buf, 3);
		}
	}

	//print_fd(fp);

	fat_close(fp);


	end: sd_eject_card();


	return 0;
}
